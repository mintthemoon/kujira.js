import { Registry } from "@cosmjs/proto-signing";
import { MsgAggregateExchangeRateVote } from "./types/tx";
import { MsgAggregateExchangeRatePrevote } from "./types/tx";
import { MsgDelegateFeedConsent } from "./types/tx";
import { OracleExtension, setupOracleExtension } from "./queries";
export const types = [
    [
        "/kujira.oracle.MsgAggregateExchangeRateVote",
        MsgAggregateExchangeRateVote
    ],
    [
        "/kujira.oracle.MsgAggregateExchangeRatePrevote",
        MsgAggregateExchangeRatePrevote
    ],
    [
        "/kujira.oracle.MsgDelegateFeedConsent",
        MsgDelegateFeedConsent
    ]
];
export const MissingWalletError = new Error("wallet is required");
export const registry = new Registry(types);
const msg = {
    msgAggregateExchangeRateVote: (data)=>({
            typeUrl: "/kujira.oracle.MsgAggregateExchangeRateVote",
            value: MsgAggregateExchangeRateVote.fromPartial(data)
        }),
    msgAggregateExchangeRatePrevote: (data)=>({
            typeUrl: "/kujira.oracle.MsgAggregateExchangeRatePrevote",
            value: MsgAggregateExchangeRatePrevote.fromPartial(data)
        }),
    msgDelegateFeedConsent: (data)=>({
            typeUrl: "/kujira.oracle.MsgDelegateFeedConsent",
            value: MsgDelegateFeedConsent.fromPartial(data)
        })
};
export { msg, OracleExtension, setupOracleExtension };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9rdWppcmEvb3JhY2xlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ2lzdHJ5LCBFbmNvZGVPYmplY3QgfSBmcm9tIFwiQGNvc21qcy9wcm90by1zaWduaW5nXCI7XG5pbXBvcnQgeyBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVWb3RlIH0gZnJvbSBcIi4vdHlwZXMvdHhcIjtcbmltcG9ydCB7IE1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGUgfSBmcm9tIFwiLi90eXBlcy90eFwiO1xuaW1wb3J0IHsgTXNnRGVsZWdhdGVGZWVkQ29uc2VudCB9IGZyb20gXCIuL3R5cGVzL3R4XCI7XG5pbXBvcnQgeyBPcmFjbGVFeHRlbnNpb24sIHNldHVwT3JhY2xlRXh0ZW5zaW9uIH0gZnJvbSBcIi4vcXVlcmllc1wiO1xuXG5leHBvcnQgY29uc3QgdHlwZXMgPSBbXG4gIFtcIi9rdWppcmEub3JhY2xlLk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVZvdGVcIiwgTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZV0sXG4gIFtcbiAgICBcIi9rdWppcmEub3JhY2xlLk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGVcIixcbiAgICBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlLFxuICBdLFxuICBbXCIva3VqaXJhLm9yYWNsZS5Nc2dEZWxlZ2F0ZUZlZWRDb25zZW50XCIsIE1zZ0RlbGVnYXRlRmVlZENvbnNlbnRdLFxuXTtcbmV4cG9ydCBjb25zdCBNaXNzaW5nV2FsbGV0RXJyb3IgPSBuZXcgRXJyb3IoXCJ3YWxsZXQgaXMgcmVxdWlyZWRcIik7XG5cbmV4cG9ydCBjb25zdCByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSg8YW55PnR5cGVzKTtcblxuY29uc3QgbXNnID0ge1xuICBtc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVWb3RlOiAoXG4gICAgZGF0YTogTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZVxuICApOiBFbmNvZGVPYmplY3QgPT4gKHtcbiAgICB0eXBlVXJsOiBcIi9rdWppcmEub3JhY2xlLk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVZvdGVcIixcbiAgICB2YWx1ZTogTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZS5mcm9tUGFydGlhbChkYXRhKSxcbiAgfSksXG4gIG1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGU6IChcbiAgICBkYXRhOiBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlXG4gICk6IEVuY29kZU9iamVjdCA9PiAoe1xuICAgIHR5cGVVcmw6IFwiL2t1amlyYS5vcmFjbGUuTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlUHJldm90ZVwiLFxuICAgIHZhbHVlOiBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlLmZyb21QYXJ0aWFsKGRhdGEpLFxuICB9KSxcbiAgbXNnRGVsZWdhdGVGZWVkQ29uc2VudDogKGRhdGE6IE1zZ0RlbGVnYXRlRmVlZENvbnNlbnQpOiBFbmNvZGVPYmplY3QgPT4gKHtcbiAgICB0eXBlVXJsOiBcIi9rdWppcmEub3JhY2xlLk1zZ0RlbGVnYXRlRmVlZENvbnNlbnRcIixcbiAgICB2YWx1ZTogTXNnRGVsZWdhdGVGZWVkQ29uc2VudC5mcm9tUGFydGlhbChkYXRhKSxcbiAgfSksXG59O1xuXG5leHBvcnQgeyBtc2csIE9yYWNsZUV4dGVuc2lvbiwgc2V0dXBPcmFjbGVFeHRlbnNpb24gfTtcbiJdLCJuYW1lcyI6WyJSZWdpc3RyeSIsIk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVZvdGUiLCJNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlIiwiTXNnRGVsZWdhdGVGZWVkQ29uc2VudCIsIk9yYWNsZUV4dGVuc2lvbiIsInNldHVwT3JhY2xlRXh0ZW5zaW9uIiwidHlwZXMiLCJNaXNzaW5nV2FsbGV0RXJyb3IiLCJFcnJvciIsInJlZ2lzdHJ5IiwibXNnIiwibXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZSIsImRhdGEiLCJ0eXBlVXJsIiwidmFsdWUiLCJmcm9tUGFydGlhbCIsIm1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGUiLCJtc2dEZWxlZ2F0ZUZlZWRDb25zZW50Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxRQUFRLFFBQXNCLHdCQUF3QjtBQUMvRCxTQUFTQyw0QkFBNEIsUUFBUSxhQUFhO0FBQzFELFNBQVNDLCtCQUErQixRQUFRLGFBQWE7QUFDN0QsU0FBU0Msc0JBQXNCLFFBQVEsYUFBYTtBQUNwRCxTQUFTQyxlQUFlLEVBQUVDLG9CQUFvQixRQUFRLFlBQVk7QUFFbEUsT0FBTyxNQUFNQyxRQUFRO0lBQ25CO1FBQUM7UUFBK0NMO0tBQTZCO0lBQzdFO1FBQ0U7UUFDQUM7S0FDRDtJQUNEO1FBQUM7UUFBeUNDO0tBQXVCO0NBQ2xFLENBQUM7QUFDRixPQUFPLE1BQU1JLHFCQUFxQixJQUFJQyxNQUFNLHNCQUFzQjtBQUVsRSxPQUFPLE1BQU1DLFdBQVcsSUFBSVQsU0FBY00sT0FBTztBQUVqRCxNQUFNSSxNQUFNO0lBQ1ZDLDhCQUE4QixDQUM1QkMsT0FDa0IsQ0FBQTtZQUNsQkMsU0FBUztZQUNUQyxPQUFPYiw2QkFBNkJjLFdBQVcsQ0FBQ0g7UUFDbEQsQ0FBQTtJQUNBSSxpQ0FBaUMsQ0FDL0JKLE9BQ2tCLENBQUE7WUFDbEJDLFNBQVM7WUFDVEMsT0FBT1osZ0NBQWdDYSxXQUFXLENBQUNIO1FBQ3JELENBQUE7SUFDQUssd0JBQXdCLENBQUNMLE9BQWdELENBQUE7WUFDdkVDLFNBQVM7WUFDVEMsT0FBT1gsdUJBQXVCWSxXQUFXLENBQUNIO1FBQzVDLENBQUE7QUFDRjtBQUVBLFNBQVNGLEdBQUcsRUFBRU4sZUFBZSxFQUFFQyxvQkFBb0IsR0FBRyJ9