"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PositionMarket: function() {
        return _usk.Position;
    },
    defaultPositionMarket: function() {
        return _usk.defaultPosition;
    },
    fetchPositionLimit: function() {
        return fetchPositionLimit;
    },
    fetchPositionMarket: function() {
        return _usk.fetchPosition;
    },
    fetchPositionsLimit: function() {
        return fetchPositionsLimit;
    }
});
const _bignumber = require("@ethersproject/bignumber");
const _usk = require("../usk");
const _client = require("./client");
const castPositionLimit = (denoms)=>(p)=>({
            idx: p.idx,
            owner: p.owner,
            margin_amount: _bignumber.BigNumber.from(p.margin_amount),
            mint_amount: _bignumber.BigNumber.from(p.mint_amount),
            interest_amount: _bignumber.BigNumber.from(p.interest_amount),
            liquidation_price: p.liquidation_price ? parseFloat(p.liquidation_price) : null,
            order: (0, _client.castOrder)(denoms)(p.order)
        });
const fetchPositionLimit = (queryClient, address, idx, denoms)=>queryClient.wasm.queryContractSmart(address, {
        position: {
            idx
        }
    }).then(castPositionLimit(denoms));
const fetchPositionsLimit = (queryClient, address, account, denoms)=>queryClient.wasm.queryContractSmart(address, {
        positions: {
            owner: account.address
        }
    }).then((xs)=>xs.positions.map(castPositionLimit(denoms)));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maW4vbWFyZ2luLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY291bnREYXRhIH0gZnJvbSBcIkBjb3NtanMvcHJvdG8tc2lnbmluZ1wiO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgRGVub20gfSBmcm9tIFwiLi4vZGVub21cIjtcbmltcG9ydCB7IEt1amlyYVF1ZXJ5Q2xpZW50IH0gZnJvbSBcIi4uL3F1ZXJ5Q2xpZW50XCI7XG5pbXBvcnQge1xuICBkZWZhdWx0UG9zaXRpb24gYXMgZGVmYXVsdFBvc2l0aW9uTWFya2V0LFxuICBmZXRjaFBvc2l0aW9uIGFzIGZldGNoUG9zaXRpb25NYXJrZXQsXG4gIFBvc2l0aW9uIGFzIFBvc2l0aW9uTWFya2V0LFxufSBmcm9tIFwiLi4vdXNrXCI7XG5pbXBvcnQgeyBjYXN0T3JkZXIgfSBmcm9tIFwiLi9jbGllbnRcIjtcbmltcG9ydCB7IE9yZGVyLCBPcmRlclJlc3BvbnNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IHsgZGVmYXVsdFBvc2l0aW9uTWFya2V0LCBmZXRjaFBvc2l0aW9uTWFya2V0LCBQb3NpdGlvbk1hcmtldCB9O1xuXG50eXBlIFBvc2l0aW9uTGltaXRSZXNwb25zZSA9IHtcbiAgaWR4OiBzdHJpbmc7XG4gIG93bmVyOiBzdHJpbmc7XG4gIGRlcG9zaXRfYW1vdW50OiBzdHJpbmc7XG4gIG1hcmdpbl9hbW91bnQ6IHN0cmluZztcbiAgbWludF9hbW91bnQ6IHN0cmluZztcbiAgaW50ZXJlc3RfYW1vdW50OiBzdHJpbmc7XG4gIGxpcXVpZGF0aW9uX3ByaWNlOiBzdHJpbmcgfCBudWxsO1xuICBvcmRlcjogT3JkZXJSZXNwb25zZTtcbn07XG5cbmV4cG9ydCB0eXBlIFBvc2l0aW9uTGltaXQgPSB7XG4gIGlkeDogc3RyaW5nO1xuICBvd25lcjogc3RyaW5nO1xuICBtYXJnaW5fYW1vdW50OiBCaWdOdW1iZXI7XG4gIG1pbnRfYW1vdW50OiBCaWdOdW1iZXI7XG4gIGludGVyZXN0X2Ftb3VudDogQmlnTnVtYmVyO1xuICBsaXF1aWRhdGlvbl9wcmljZTogbnVtYmVyIHwgbnVsbDtcbiAgb3JkZXI6IE9yZGVyO1xufTtcblxuY29uc3QgY2FzdFBvc2l0aW9uTGltaXQgPVxuICAoZGVub21zOiBbRGVub20sIERlbm9tXSkgPT5cbiAgKHA6IFBvc2l0aW9uTGltaXRSZXNwb25zZSk6IFBvc2l0aW9uTGltaXQgPT4gKHtcbiAgICBpZHg6IHAuaWR4LFxuICAgIG93bmVyOiBwLm93bmVyLFxuICAgIG1hcmdpbl9hbW91bnQ6IEJpZ051bWJlci5mcm9tKHAubWFyZ2luX2Ftb3VudCksXG4gICAgbWludF9hbW91bnQ6IEJpZ051bWJlci5mcm9tKHAubWludF9hbW91bnQpLFxuICAgIGludGVyZXN0X2Ftb3VudDogQmlnTnVtYmVyLmZyb20ocC5pbnRlcmVzdF9hbW91bnQpLFxuICAgIGxpcXVpZGF0aW9uX3ByaWNlOiBwLmxpcXVpZGF0aW9uX3ByaWNlXG4gICAgICA/IHBhcnNlRmxvYXQocC5saXF1aWRhdGlvbl9wcmljZSlcbiAgICAgIDogbnVsbCxcbiAgICBvcmRlcjogY2FzdE9yZGVyKGRlbm9tcykocC5vcmRlciksXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hQb3NpdGlvbkxpbWl0ID0gKFxuICBxdWVyeUNsaWVudDogS3VqaXJhUXVlcnlDbGllbnQsXG4gIGFkZHJlc3M6IHN0cmluZyxcbiAgaWR4OiBzdHJpbmcsXG4gIGRlbm9tczogW0Rlbm9tLCBEZW5vbV1cbik6IFByb21pc2U8UG9zaXRpb25MaW1pdD4gPT5cbiAgcXVlcnlDbGllbnQud2FzbVxuICAgIC5xdWVyeUNvbnRyYWN0U21hcnQoYWRkcmVzcywge1xuICAgICAgcG9zaXRpb246IHsgaWR4IH0sXG4gICAgfSlcbiAgICAudGhlbihjYXN0UG9zaXRpb25MaW1pdChkZW5vbXMpKTtcblxuZXhwb3J0IGNvbnN0IGZldGNoUG9zaXRpb25zTGltaXQgPSAoXG4gIHF1ZXJ5Q2xpZW50OiBLdWppcmFRdWVyeUNsaWVudCxcbiAgYWRkcmVzczogc3RyaW5nLFxuICBhY2NvdW50OiBBY2NvdW50RGF0YSxcbiAgZGVub21zOiBbRGVub20sIERlbm9tXVxuKTogUHJvbWlzZTxQb3NpdGlvbkxpbWl0W10+ID0+XG4gIHF1ZXJ5Q2xpZW50Lndhc21cbiAgICAucXVlcnlDb250cmFjdFNtYXJ0KGFkZHJlc3MsIHtcbiAgICAgIHBvc2l0aW9uczogeyBvd25lcjogYWNjb3VudC5hZGRyZXNzIH0sXG4gICAgfSlcbiAgICAudGhlbigoeHM6IGFueSkgPT4geHMucG9zaXRpb25zLm1hcChjYXN0UG9zaXRpb25MaW1pdChkZW5vbXMpKSk7XG4iXSwibmFtZXMiOlsiUG9zaXRpb25NYXJrZXQiLCJkZWZhdWx0UG9zaXRpb25NYXJrZXQiLCJmZXRjaFBvc2l0aW9uTGltaXQiLCJmZXRjaFBvc2l0aW9uTWFya2V0IiwiZmV0Y2hQb3NpdGlvbnNMaW1pdCIsImNhc3RQb3NpdGlvbkxpbWl0IiwiZGVub21zIiwicCIsImlkeCIsIm93bmVyIiwibWFyZ2luX2Ftb3VudCIsIkJpZ051bWJlciIsImZyb20iLCJtaW50X2Ftb3VudCIsImludGVyZXN0X2Ftb3VudCIsImxpcXVpZGF0aW9uX3ByaWNlIiwicGFyc2VGbG9hdCIsIm9yZGVyIiwiY2FzdE9yZGVyIiwicXVlcnlDbGllbnQiLCJhZGRyZXNzIiwid2FzbSIsInF1ZXJ5Q29udHJhY3RTbWFydCIsInBvc2l0aW9uIiwidGhlbiIsImFjY291bnQiLCJwb3NpdGlvbnMiLCJ4cyIsIm1hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFZcURBLGNBQWM7ZUFBZEEsYUFBYzs7SUFBMURDLHFCQUFxQjtlQUFyQkEsb0JBQXFCOztJQXFDakJDLGtCQUFrQjtlQUFsQkE7O0lBckNtQkMsbUJBQW1CO2VBQW5CQSxrQkFBbUI7O0lBaUR0Q0MsbUJBQW1CO2VBQW5CQTs7OzJCQTVEYTtxQkFPbkI7d0JBQ21CO0FBMEIxQixNQUFNQyxvQkFDSixDQUFDQyxTQUNELENBQUNDLElBQTZDLENBQUE7WUFDNUNDLEtBQUtELEVBQUVDLEdBQUc7WUFDVkMsT0FBT0YsRUFBRUUsS0FBSztZQUNkQyxlQUFlQyxvQkFBUyxDQUFDQyxJQUFJLENBQUNMLEVBQUVHLGFBQWE7WUFDN0NHLGFBQWFGLG9CQUFTLENBQUNDLElBQUksQ0FBQ0wsRUFBRU0sV0FBVztZQUN6Q0MsaUJBQWlCSCxvQkFBUyxDQUFDQyxJQUFJLENBQUNMLEVBQUVPLGVBQWU7WUFDakRDLG1CQUFtQlIsRUFBRVEsaUJBQWlCLEdBQ2xDQyxXQUFXVCxFQUFFUSxpQkFBaUIsSUFDOUI7WUFDSkUsT0FBT0MsSUFBQUEsaUJBQVMsRUFBQ1osUUFBUUMsRUFBRVUsS0FBSztRQUNsQyxDQUFBO0FBRUssTUFBTWYscUJBQXFCLENBQ2hDaUIsYUFDQUMsU0FDQVosS0FDQUYsU0FFQWEsWUFBWUUsSUFBSSxDQUNiQyxrQkFBa0IsQ0FBQ0YsU0FBUztRQUMzQkcsVUFBVTtZQUFFZjtRQUFJO0lBQ2xCLEdBQ0NnQixJQUFJLENBQUNuQixrQkFBa0JDO0FBRXJCLE1BQU1GLHNCQUFzQixDQUNqQ2UsYUFDQUMsU0FDQUssU0FDQW5CLFNBRUFhLFlBQVlFLElBQUksQ0FDYkMsa0JBQWtCLENBQUNGLFNBQVM7UUFDM0JNLFdBQVc7WUFBRWpCLE9BQU9nQixRQUFRTCxPQUFPO1FBQUM7SUFDdEMsR0FDQ0ksSUFBSSxDQUFDLENBQUNHLEtBQVlBLEdBQUdELFNBQVMsQ0FBQ0UsR0FBRyxDQUFDdkIsa0JBQWtCQyJ9