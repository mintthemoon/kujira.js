import { Registry } from "@cosmjs/proto-signing";
import { MsgAggregateExchangeRateVote } from "./types/tx";
import { MsgAggregateExchangeRatePrevote } from "./types/tx";
import { MsgDelegateFeedConsent } from "./types/tx";
import { setupOracleExtension } from "./queries";
export const types = [
    [
        "/kujira.oracle.MsgAggregateExchangeRateVote",
        MsgAggregateExchangeRateVote
    ],
    [
        "/kujira.oracle.MsgAggregateExchangeRatePrevote",
        MsgAggregateExchangeRatePrevote
    ],
    [
        "/kujira.oracle.MsgDelegateFeedConsent",
        MsgDelegateFeedConsent
    ]
];
export const MissingWalletError = new Error("wallet is required");
export const registry = new Registry(types);
const msg = {
    msgAggregateExchangeRateVote: (data)=>({
            typeUrl: "/kujira.oracle.MsgAggregateExchangeRateVote",
            value: MsgAggregateExchangeRateVote.fromPartial(data)
        }),
    msgAggregateExchangeRatePrevote: (data)=>({
            typeUrl: "/kujira.oracle.MsgAggregateExchangeRatePrevote",
            value: MsgAggregateExchangeRatePrevote.fromPartial(data)
        }),
    msgDelegateFeedConsent: (data)=>({
            typeUrl: "/kujira.oracle.MsgDelegateFeedConsent",
            value: MsgDelegateFeedConsent.fromPartial(data)
        })
};
export { msg, setupOracleExtension };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9rdWppcmEvb3JhY2xlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ2lzdHJ5LCBFbmNvZGVPYmplY3QgfSBmcm9tIFwiQGNvc21qcy9wcm90by1zaWduaW5nXCI7XG5pbXBvcnQgeyBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVWb3RlIH0gZnJvbSBcIi4vdHlwZXMvdHhcIjtcbmltcG9ydCB7IE1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGUgfSBmcm9tIFwiLi90eXBlcy90eFwiO1xuaW1wb3J0IHsgTXNnRGVsZWdhdGVGZWVkQ29uc2VudCB9IGZyb20gXCIuL3R5cGVzL3R4XCI7XG5pbXBvcnQgeyBPcmFjbGVFeHRlbnNpb24sIHNldHVwT3JhY2xlRXh0ZW5zaW9uIH0gZnJvbSBcIi4vcXVlcmllc1wiO1xuXG5leHBvcnQgY29uc3QgdHlwZXMgPSBbXG4gIFtcIi9rdWppcmEub3JhY2xlLk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVZvdGVcIiwgTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZV0sXG4gIFtcbiAgICBcIi9rdWppcmEub3JhY2xlLk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGVcIixcbiAgICBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlLFxuICBdLFxuICBbXCIva3VqaXJhLm9yYWNsZS5Nc2dEZWxlZ2F0ZUZlZWRDb25zZW50XCIsIE1zZ0RlbGVnYXRlRmVlZENvbnNlbnRdLFxuXTtcbmV4cG9ydCBjb25zdCBNaXNzaW5nV2FsbGV0RXJyb3IgPSBuZXcgRXJyb3IoXCJ3YWxsZXQgaXMgcmVxdWlyZWRcIik7XG5cbmV4cG9ydCBjb25zdCByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSg8YW55PnR5cGVzKTtcblxuY29uc3QgbXNnID0ge1xuICBtc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVWb3RlOiAoXG4gICAgZGF0YTogTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZVxuICApOiBFbmNvZGVPYmplY3QgPT4gKHtcbiAgICB0eXBlVXJsOiBcIi9rdWppcmEub3JhY2xlLk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVZvdGVcIixcbiAgICB2YWx1ZTogTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZS5mcm9tUGFydGlhbChkYXRhKSxcbiAgfSksXG4gIG1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGU6IChcbiAgICBkYXRhOiBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlXG4gICk6IEVuY29kZU9iamVjdCA9PiAoe1xuICAgIHR5cGVVcmw6IFwiL2t1amlyYS5vcmFjbGUuTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlUHJldm90ZVwiLFxuICAgIHZhbHVlOiBNc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVQcmV2b3RlLmZyb21QYXJ0aWFsKGRhdGEpLFxuICB9KSxcbiAgbXNnRGVsZWdhdGVGZWVkQ29uc2VudDogKGRhdGE6IE1zZ0RlbGVnYXRlRmVlZENvbnNlbnQpOiBFbmNvZGVPYmplY3QgPT4gKHtcbiAgICB0eXBlVXJsOiBcIi9rdWppcmEub3JhY2xlLk1zZ0RlbGVnYXRlRmVlZENvbnNlbnRcIixcbiAgICB2YWx1ZTogTXNnRGVsZWdhdGVGZWVkQ29uc2VudC5mcm9tUGFydGlhbChkYXRhKSxcbiAgfSksXG59O1xuXG5leHBvcnQgeyBtc2csIHR5cGUgT3JhY2xlRXh0ZW5zaW9uLCBzZXR1cE9yYWNsZUV4dGVuc2lvbiB9O1xuIl0sIm5hbWVzIjpbIlJlZ2lzdHJ5IiwiTXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlVm90ZSIsIk1zZ0FnZ3JlZ2F0ZUV4Y2hhbmdlUmF0ZVByZXZvdGUiLCJNc2dEZWxlZ2F0ZUZlZWRDb25zZW50Iiwic2V0dXBPcmFjbGVFeHRlbnNpb24iLCJ0eXBlcyIsIk1pc3NpbmdXYWxsZXRFcnJvciIsIkVycm9yIiwicmVnaXN0cnkiLCJtc2ciLCJtc2dBZ2dyZWdhdGVFeGNoYW5nZVJhdGVWb3RlIiwiZGF0YSIsInR5cGVVcmwiLCJ2YWx1ZSIsImZyb21QYXJ0aWFsIiwibXNnQWdncmVnYXRlRXhjaGFuZ2VSYXRlUHJldm90ZSIsIm1zZ0RlbGVnYXRlRmVlZENvbnNlbnQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFFBQVEsUUFBc0Isd0JBQXdCO0FBQy9ELFNBQVNDLDRCQUE0QixRQUFRLGFBQWE7QUFDMUQsU0FBU0MsK0JBQStCLFFBQVEsYUFBYTtBQUM3RCxTQUFTQyxzQkFBc0IsUUFBUSxhQUFhO0FBQ3BELFNBQTBCQyxvQkFBb0IsUUFBUSxZQUFZO0FBRWxFLE9BQU8sTUFBTUMsUUFBUTtJQUNuQjtRQUFDO1FBQStDSjtLQUE2QjtJQUM3RTtRQUNFO1FBQ0FDO0tBQ0Q7SUFDRDtRQUFDO1FBQXlDQztLQUF1QjtDQUNsRSxDQUFDO0FBQ0YsT0FBTyxNQUFNRyxxQkFBcUIsSUFBSUMsTUFBTSxzQkFBc0I7QUFFbEUsT0FBTyxNQUFNQyxXQUFXLElBQUlSLFNBQWNLLE9BQU87QUFFakQsTUFBTUksTUFBTTtJQUNWQyw4QkFBOEIsQ0FDNUJDLE9BQ2tCLENBQUE7WUFDbEJDLFNBQVM7WUFDVEMsT0FBT1osNkJBQTZCYSxXQUFXLENBQUNIO1FBQ2xELENBQUE7SUFDQUksaUNBQWlDLENBQy9CSixPQUNrQixDQUFBO1lBQ2xCQyxTQUFTO1lBQ1RDLE9BQU9YLGdDQUFnQ1ksV0FBVyxDQUFDSDtRQUNyRCxDQUFBO0lBQ0FLLHdCQUF3QixDQUFDTCxPQUFnRCxDQUFBO1lBQ3ZFQyxTQUFTO1lBQ1RDLE9BQU9WLHVCQUF1QlcsV0FBVyxDQUFDSDtRQUM1QyxDQUFBO0FBQ0Y7QUFFQSxTQUFTRixHQUFHLEVBQXdCTCxvQkFBb0IsR0FBRyJ9