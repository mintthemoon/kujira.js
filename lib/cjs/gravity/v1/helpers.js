/* eslint-disable */ /**
 * This file and any referenced files were automatically generated by @osmonauts/telescope@0.69.0
 * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
 * and run the transpile command or yarn proto command to regenerate this bundle.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Long: function() {
        return _long.default;
    },
    base64FromBytes: function() {
        return base64FromBytes;
    },
    bytesFromBase64: function() {
        return bytesFromBase64;
    },
    fromDuration: function() {
        return fromDuration;
    },
    fromJsonTimestamp: function() {
        return fromJsonTimestamp;
    },
    fromTimestamp: function() {
        return fromTimestamp;
    },
    isObject: function() {
        return isObject;
    },
    isSet: function() {
        return isSet;
    },
    omitDefault: function() {
        return omitDefault;
    },
    setPaginationParams: function() {
        return setPaginationParams;
    },
    toDuration: function() {
        return toDuration;
    },
    toTimestamp: function() {
        return toTimestamp;
    }
});
const _long = /*#__PURE__*/ _interop_require_default(require("long"));
const _minimal = /*#__PURE__*/ _interop_require_wildcard(require("protobufjs/minimal"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// @ts-ignore
if (_minimal.util.Long !== _long.default) {
    _minimal.util.Long = _long.default;
    _minimal.configure();
}
var globalThis = (()=>{
    if (typeof globalThis !== "undefined") return globalThis;
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob || ((b64)=>globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for(let i = 0; i < bin.length; ++i){
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa || ((bin)=>globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte)=>{
        bin.push(String.fromCharCode(byte));
    });
    return btoa(bin.join(""));
}
function omitDefault(input) {
    if (typeof input === "string") {
        return input === "" ? undefined : input;
    }
    if (typeof input === "number") {
        return input === 0 ? undefined : input;
    }
    if (_long.default.isLong(input)) {
        return input.isZero() ? undefined : input;
    }
    throw new Error(`Got unsupported type ${typeof input}`);
}
function toDuration(duration) {
    return {
        seconds: _long.default.fromNumber(Math.floor(parseInt(duration) / 1000000000)),
        nanos: parseInt(duration) % 1000000000
    };
}
function fromDuration(duration) {
    return (parseInt(duration.seconds.toString()) * 1000000000 + duration.nanos).toString();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
const setPaginationParams = (options, pagination)=>{
    if (!pagination) {
        return options;
    }
    if (typeof (pagination === null || pagination === void 0 ? void 0 : pagination.countTotal) !== "undefined") {
        options.params["pagination.count_total"] = pagination.countTotal;
    }
    if (typeof (pagination === null || pagination === void 0 ? void 0 : pagination.key) !== "undefined") {
        // String to Uint8Array
        // let uint8arr = new Uint8Array(Buffer.from(data,'base64'));
        // Uint8Array to String
        options.params["pagination.key"] = globalThis.Buffer.from(pagination.key).toString("base64");
    }
    if (typeof (pagination === null || pagination === void 0 ? void 0 : pagination.limit) !== "undefined") {
        options.params["pagination.limit"] = pagination.limit.toString();
    }
    if (typeof (pagination === null || pagination === void 0 ? void 0 : pagination.offset) !== "undefined") {
        options.params["pagination.offset"] = pagination.offset.toString();
    }
    if (typeof (pagination === null || pagination === void 0 ? void 0 : pagination.reverse) !== "undefined") {
        options.params["pagination.reverse"] = pagination.reverse;
    }
    return options;
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
const fromJSON = (object)=>{
    return {
        seconds: isSet(object.seconds) ? _long.default.fromString(object.seconds) : _long.default.ZERO,
        nanos: isSet(object.nanos) ? Number(object.nanos) : 0
    };
};
const timestampFromJSON = (object)=>{
    return {
        seconds: isSet(object.seconds) ? _long.default.fromValue(object.seconds) : _long.default.ZERO,
        nanos: isSet(object.nanos) ? Number(object.nanos) : 0
    };
};
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return toTimestamp(o);
    } else if (typeof o === "string") {
        return toTimestamp(new Date(o));
    } else {
        return timestampFromJSON(o);
    }
}
function numberToLong(number) {
    return _long.default.fromNumber(number);
}

//# sourceMappingURL=data:application/json;base64,