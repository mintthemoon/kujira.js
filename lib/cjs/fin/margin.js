"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    defaultPositionMarket: function() {
        return _usk.defaultPosition;
    },
    fetchPositionLimit: function() {
        return fetchPositionLimit;
    },
    fetchPositionMarket: function() {
        return _usk.fetchPosition;
    },
    fetchPositionsLimit: function() {
        return fetchPositionsLimit;
    }
});
const _bignumber = require("@ethersproject/bignumber");
const _usk = require("../usk");
const _client = require("./client");
const castPositionLimit = (denoms)=>(p)=>({
            idx: p.idx,
            owner: p.owner,
            margin_amount: _bignumber.BigNumber.from(p.margin_amount),
            mint_amount: _bignumber.BigNumber.from(p.mint_amount),
            interest_amount: _bignumber.BigNumber.from(p.interest_amount),
            liquidation_price: p.liquidation_price ? parseFloat(p.liquidation_price) : null,
            order: (0, _client.castOrder)(denoms)(p.order)
        });
const fetchPositionLimit = (queryClient, address, idx, denoms)=>queryClient.wasm.queryContractSmart(address, {
        position: {
            idx
        }
    }).then(castPositionLimit(denoms));
const fetchPositionsLimit = (queryClient, address, account, denoms)=>queryClient.wasm.queryContractSmart(address, {
        positions: {
            owner: account.address
        }
    }).then((xs)=>xs.positions.map(castPositionLimit(denoms)));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maW4vbWFyZ2luLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjY291bnREYXRhIH0gZnJvbSBcIkBjb3NtanMvcHJvdG8tc2lnbmluZ1wiO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgRGVub20gfSBmcm9tIFwiLi4vZGVub21cIjtcbmltcG9ydCB7IEt1amlyYVF1ZXJ5Q2xpZW50IH0gZnJvbSBcIi4uL3F1ZXJ5Q2xpZW50XCI7XG5pbXBvcnQge1xuICBkZWZhdWx0UG9zaXRpb24gYXMgZGVmYXVsdFBvc2l0aW9uTWFya2V0LFxuICBmZXRjaFBvc2l0aW9uIGFzIGZldGNoUG9zaXRpb25NYXJrZXQsXG4gIFBvc2l0aW9uIGFzIFBvc2l0aW9uTWFya2V0LFxufSBmcm9tIFwiLi4vdXNrXCI7XG5pbXBvcnQgeyBjYXN0T3JkZXIgfSBmcm9tIFwiLi9jbGllbnRcIjtcbmltcG9ydCB7IE9yZGVyLCBPcmRlclJlc3BvbnNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IHsgZGVmYXVsdFBvc2l0aW9uTWFya2V0LCBmZXRjaFBvc2l0aW9uTWFya2V0LCB0eXBlIFBvc2l0aW9uTWFya2V0IH07XG5cbnR5cGUgUG9zaXRpb25MaW1pdFJlc3BvbnNlID0ge1xuICBpZHg6IHN0cmluZztcbiAgb3duZXI6IHN0cmluZztcbiAgZGVwb3NpdF9hbW91bnQ6IHN0cmluZztcbiAgbWFyZ2luX2Ftb3VudDogc3RyaW5nO1xuICBtaW50X2Ftb3VudDogc3RyaW5nO1xuICBpbnRlcmVzdF9hbW91bnQ6IHN0cmluZztcbiAgbGlxdWlkYXRpb25fcHJpY2U6IHN0cmluZyB8IG51bGw7XG4gIG9yZGVyOiBPcmRlclJlc3BvbnNlO1xufTtcblxuZXhwb3J0IHR5cGUgUG9zaXRpb25MaW1pdCA9IHtcbiAgaWR4OiBzdHJpbmc7XG4gIG93bmVyOiBzdHJpbmc7XG4gIG1hcmdpbl9hbW91bnQ6IEJpZ051bWJlcjtcbiAgbWludF9hbW91bnQ6IEJpZ051bWJlcjtcbiAgaW50ZXJlc3RfYW1vdW50OiBCaWdOdW1iZXI7XG4gIGxpcXVpZGF0aW9uX3ByaWNlOiBudW1iZXIgfCBudWxsO1xuICBvcmRlcjogT3JkZXI7XG59O1xuXG5jb25zdCBjYXN0UG9zaXRpb25MaW1pdCA9XG4gIChkZW5vbXM6IFtEZW5vbSwgRGVub21dKSA9PlxuICAocDogUG9zaXRpb25MaW1pdFJlc3BvbnNlKTogUG9zaXRpb25MaW1pdCA9PiAoe1xuICAgIGlkeDogcC5pZHgsXG4gICAgb3duZXI6IHAub3duZXIsXG4gICAgbWFyZ2luX2Ftb3VudDogQmlnTnVtYmVyLmZyb20ocC5tYXJnaW5fYW1vdW50KSxcbiAgICBtaW50X2Ftb3VudDogQmlnTnVtYmVyLmZyb20ocC5taW50X2Ftb3VudCksXG4gICAgaW50ZXJlc3RfYW1vdW50OiBCaWdOdW1iZXIuZnJvbShwLmludGVyZXN0X2Ftb3VudCksXG4gICAgbGlxdWlkYXRpb25fcHJpY2U6IHAubGlxdWlkYXRpb25fcHJpY2VcbiAgICAgID8gcGFyc2VGbG9hdChwLmxpcXVpZGF0aW9uX3ByaWNlKVxuICAgICAgOiBudWxsLFxuICAgIG9yZGVyOiBjYXN0T3JkZXIoZGVub21zKShwLm9yZGVyKSxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBmZXRjaFBvc2l0aW9uTGltaXQgPSAoXG4gIHF1ZXJ5Q2xpZW50OiBLdWppcmFRdWVyeUNsaWVudCxcbiAgYWRkcmVzczogc3RyaW5nLFxuICBpZHg6IHN0cmluZyxcbiAgZGVub21zOiBbRGVub20sIERlbm9tXVxuKTogUHJvbWlzZTxQb3NpdGlvbkxpbWl0PiA9PlxuICBxdWVyeUNsaWVudC53YXNtXG4gICAgLnF1ZXJ5Q29udHJhY3RTbWFydChhZGRyZXNzLCB7XG4gICAgICBwb3NpdGlvbjogeyBpZHggfSxcbiAgICB9KVxuICAgIC50aGVuKGNhc3RQb3NpdGlvbkxpbWl0KGRlbm9tcykpO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hQb3NpdGlvbnNMaW1pdCA9IChcbiAgcXVlcnlDbGllbnQ6IEt1amlyYVF1ZXJ5Q2xpZW50LFxuICBhZGRyZXNzOiBzdHJpbmcsXG4gIGFjY291bnQ6IEFjY291bnREYXRhLFxuICBkZW5vbXM6IFtEZW5vbSwgRGVub21dXG4pOiBQcm9taXNlPFBvc2l0aW9uTGltaXRbXT4gPT5cbiAgcXVlcnlDbGllbnQud2FzbVxuICAgIC5xdWVyeUNvbnRyYWN0U21hcnQoYWRkcmVzcywge1xuICAgICAgcG9zaXRpb25zOiB7IG93bmVyOiBhY2NvdW50LmFkZHJlc3MgfSxcbiAgICB9KVxuICAgIC50aGVuKCh4czogYW55KSA9PiB4cy5wb3NpdGlvbnMubWFwKGNhc3RQb3NpdGlvbkxpbWl0KGRlbm9tcykpKTtcbiJdLCJuYW1lcyI6WyJkZWZhdWx0UG9zaXRpb25NYXJrZXQiLCJmZXRjaFBvc2l0aW9uTGltaXQiLCJmZXRjaFBvc2l0aW9uTWFya2V0IiwiZmV0Y2hQb3NpdGlvbnNMaW1pdCIsImNhc3RQb3NpdGlvbkxpbWl0IiwiZGVub21zIiwicCIsImlkeCIsIm93bmVyIiwibWFyZ2luX2Ftb3VudCIsIkJpZ051bWJlciIsImZyb20iLCJtaW50X2Ftb3VudCIsImludGVyZXN0X2Ftb3VudCIsImxpcXVpZGF0aW9uX3ByaWNlIiwicGFyc2VGbG9hdCIsIm9yZGVyIiwiY2FzdE9yZGVyIiwicXVlcnlDbGllbnQiLCJhZGRyZXNzIiwid2FzbSIsInF1ZXJ5Q29udHJhY3RTbWFydCIsInBvc2l0aW9uIiwidGhlbiIsImFjY291bnQiLCJwb3NpdGlvbnMiLCJ4cyIsIm1hcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFZU0EscUJBQXFCO2VBQXJCQSxvQkFBcUI7O0lBcUNqQkMsa0JBQWtCO2VBQWxCQTs7SUFyQ21CQyxtQkFBbUI7ZUFBbkJBLGtCQUFtQjs7SUFpRHRDQyxtQkFBbUI7ZUFBbkJBOzs7MkJBNURhO3FCQU9uQjt3QkFDbUI7QUEwQjFCLE1BQU1DLG9CQUNKLENBQUNDLFNBQ0QsQ0FBQ0MsSUFBNkMsQ0FBQTtZQUM1Q0MsS0FBS0QsRUFBRUMsR0FBRztZQUNWQyxPQUFPRixFQUFFRSxLQUFLO1lBQ2RDLGVBQWVDLG9CQUFTLENBQUNDLElBQUksQ0FBQ0wsRUFBRUcsYUFBYTtZQUM3Q0csYUFBYUYsb0JBQVMsQ0FBQ0MsSUFBSSxDQUFDTCxFQUFFTSxXQUFXO1lBQ3pDQyxpQkFBaUJILG9CQUFTLENBQUNDLElBQUksQ0FBQ0wsRUFBRU8sZUFBZTtZQUNqREMsbUJBQW1CUixFQUFFUSxpQkFBaUIsR0FDbENDLFdBQVdULEVBQUVRLGlCQUFpQixJQUM5QjtZQUNKRSxPQUFPQyxJQUFBQSxpQkFBUyxFQUFDWixRQUFRQyxFQUFFVSxLQUFLO1FBQ2xDLENBQUE7QUFFSyxNQUFNZixxQkFBcUIsQ0FDaENpQixhQUNBQyxTQUNBWixLQUNBRixTQUVBYSxZQUFZRSxJQUFJLENBQ2JDLGtCQUFrQixDQUFDRixTQUFTO1FBQzNCRyxVQUFVO1lBQUVmO1FBQUk7SUFDbEIsR0FDQ2dCLElBQUksQ0FBQ25CLGtCQUFrQkM7QUFFckIsTUFBTUYsc0JBQXNCLENBQ2pDZSxhQUNBQyxTQUNBSyxTQUNBbkIsU0FFQWEsWUFBWUUsSUFBSSxDQUNiQyxrQkFBa0IsQ0FBQ0YsU0FBUztRQUMzQk0sV0FBVztZQUFFakIsT0FBT2dCLFFBQVFMLE9BQU87UUFBQztJQUN0QyxHQUNDSSxJQUFJLENBQUMsQ0FBQ0csS0FBWUEsR0FBR0QsU0FBUyxDQUFDRSxHQUFHLENBQUN2QixrQkFBa0JDIn0=